/* 60f35f595f42b79a93c5a0345cdd67f3d9867432
 * This file is automatically generated by graphql-let. */

import * as Apollo from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    /** Mongo object id scalar type */
    ObjectId: any;
};
export declare type AddBoardInput = {
    bgColor: Scalars['String'];
    title: Scalars['String'];
};
export declare type AddCardInput = {
    parentId: Scalars['ObjectId'];
    title: Scalars['String'];
};
export declare type AddListInput = {
    parentId: Scalars['ObjectId'];
    title: Scalars['String'];
};
export declare type Board = {
    __typename?: 'Board';
    _id: Scalars['ObjectId'];
    author: User;
    bgColor: Scalars['String'];
    lists: Array<List>;
    title: Scalars['String'];
};
export declare type Card = {
    __typename?: 'Card';
    _id: Scalars['ObjectId'];
    list: List;
    title: Scalars['String'];
};
export declare type EditBoardInput = {
    id: Scalars['ObjectId'];
    title: Scalars['String'];
};
export declare type EditCardInput = {
    id: Scalars['ObjectId'];
    title: Scalars['String'];
};
export declare type EditListIdInput = {
    id: Scalars['ObjectId'];
    parentId: Scalars['ObjectId'];
};
export declare type EditListInput = {
    id: Scalars['ObjectId'];
    title: Scalars['String'];
};
export declare type List = {
    __typename?: 'List';
    _id: Scalars['ObjectId'];
    board: Board;
    cards: Array<Card>;
    title: Scalars['String'];
};
export declare type Mutation = {
    __typename?: 'Mutation';
    addBoard: Board;
    addCard: Card;
    addList: List;
    deleteBoard: Scalars['Boolean'];
    deleteCard: Scalars['Boolean'];
    deleteList: Scalars['Boolean'];
    editBoard: Board;
    editCard: Card;
    editList: List;
    editListId: Card;
    login?: Maybe<User>;
    logout: Scalars['Boolean'];
    register: User;
};
export declare type MutationAddBoardArgs = {
    input: AddBoardInput;
};
export declare type MutationAddCardArgs = {
    input: AddCardInput;
};
export declare type MutationAddListArgs = {
    input: AddListInput;
};
export declare type MutationDeleteBoardArgs = {
    boardId: Scalars['ObjectId'];
};
export declare type MutationDeleteCardArgs = {
    cardId: Scalars['ObjectId'];
};
export declare type MutationDeleteListArgs = {
    listId: Scalars['ObjectId'];
};
export declare type MutationEditBoardArgs = {
    input: EditBoardInput;
};
export declare type MutationEditCardArgs = {
    input: EditCardInput;
};
export declare type MutationEditListArgs = {
    input: EditListInput;
};
export declare type MutationEditListIdArgs = {
    input: EditListIdInput;
};
export declare type MutationLoginArgs = {
    email: Scalars['String'];
    password: Scalars['String'];
};
export declare type MutationRegisterArgs = {
    email: Scalars['String'];
    password: Scalars['String'];
};
export declare type Query = {
    __typename?: 'Query';
    allBoards: Array<Board>;
    allCards: Array<Card>;
    allLists: Array<List>;
    currentUser?: Maybe<User>;
    singleBoard?: Maybe<Board>;
};
export declare type QueryAllCardsArgs = {
    listId: Scalars['ObjectId'];
};
export declare type QueryAllListsArgs = {
    boardId: Scalars['ObjectId'];
};
export declare type QuerySingleBoardArgs = {
    boardId: Scalars['ObjectId'];
};
export declare type User = {
    __typename?: 'User';
    _id: Scalars['ObjectId'];
    email: Scalars['String'];
};
export declare type AllBoardsQueryVariables = Exact<{
    [key: string]: never;
}>;
export declare type AllBoardsQuery = ({
    __typename?: 'Query';
} & {
    allBoards: Array<({
        __typename?: 'Board';
    } & Pick<Board, '_id' | 'title' | 'bgColor'>)>;
});
export declare const AllBoardsDocument: Apollo.DocumentNode;
/**
 * __useAllBoardsQuery__
 *
 * To run a query within a React component, call `useAllBoardsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAllBoardsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAllBoardsQuery({
 *   variables: {
 *   },
 * });
 */
export declare function useAllBoardsQuery(baseOptions?: Apollo.QueryHookOptions<AllBoardsQuery, AllBoardsQueryVariables>): Apollo.QueryResult<AllBoardsQuery, Exact<{
    [key: string]: never;
}>>;
export declare function useAllBoardsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AllBoardsQuery, AllBoardsQueryVariables>): Apollo.QueryTuple<AllBoardsQuery, Exact<{
    [key: string]: never;
}>>;
export declare type AllBoardsQueryHookResult = ReturnType<typeof useAllBoardsQuery>;
export declare type AllBoardsLazyQueryHookResult = ReturnType<typeof useAllBoardsLazyQuery>;
export declare type AllBoardsQueryResult = Apollo.QueryResult<AllBoardsQuery, AllBoardsQueryVariables>;
